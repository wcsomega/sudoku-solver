{"version":3,"sources":["SudokuSolver.js","components.js","App.js","index.js"],"names":["checkValidity","numbers","x","y","value","i","cellVal","getAt","checkRow","checkColumn","squareX","Math","floor","squareY","iy","ix","checkSquare","get","setAt","set","Square","selected","fixed","children","rest","css","display","backgroundColor","color","fontSize","userSelect","margin","Button","borderRadius","border","padding","textTransform","Grid","forwardRef","ref","rows","columns","gridTemplateColumns","gridTemplateRows","overflow","SudokuGrid","selection","onSelectCell","onClickOutside","r","useRef","useEffect","handleOutside","event","current","contains","target","document","addEventListener","removeEventListener","map","number","index","trunc","onClick","borderTop","borderLeft","key","NumButton","width","height","App","props","deselect","setState","handleClick","resetPuzzle","List","Array","fill","solvePuzzle","nums","solve","val","sol","state","onNumButton","textAlign","marginRight","marginLeft","marginTop","marginBottom","this","Range","num","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c465fe51.chunk.js","sourcesContent":["import {get, set} from 'immutable';\r\n\r\n\r\n// should call itself recursively\r\n// every iteration finds first open cell\r\n// then, starting with the number 1 and counting up to 9\r\n// a number is checked. if it is valid, call solve again\r\n// if none of the numbers checked are valid, function should\r\n// return and then the \"previous\" iteration continues from\r\n// where it left off. \r\nexport function solve(numbers) {\r\n    //find first open cell\r\n    for (let x = 0; x < 9; x++) {\r\n        for (let y = 0; y < 9; y++) {\r\n            if (getAt(numbers, x, y) === 0){\r\n                //count up from 1 to 9\r\n                for(let val = 1; val < 10; val++){\r\n                    if(checkValidity(numbers, x, y, val)) {\r\n                        let sol = solve(setAt(numbers, x, y, val));\r\n                        if (sol !== null) {\r\n                            return sol;\r\n                        }\r\n                    }\r\n                }\r\n                // if nothing fits, return null\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    return numbers;\r\n}\r\n\r\nfunction checkValidity(numbers, x, y, value) {\r\n    return checkRow(numbers, y, value)\r\n        && checkColumn(numbers, x, value)\r\n        && checkSquare(numbers, x, y, value); \r\n}\r\n\r\nfunction checkSquare(numbers, x, y, value) {\r\n    const squareX = Math.floor(x/3)*3;\r\n    const squareY = Math.floor(y/3)*3;\r\n    for (let iy = 0; iy < 3; iy++) {\r\n        for (let ix = 0; ix < 3; ix++){\r\n            let cellVal = getAt(numbers, squareX + ix, squareY + iy);\r\n            if (cellVal !== 0 && value === cellVal) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction checkColumn(numbers, x, value) {\r\n    for (let i = 0; i < 9; i++) {\r\n        let cellVal = getAt(numbers, x, i)\r\n        if (cellVal !== 0 && value === cellVal) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction checkRow (numbers, y, value) {\r\n    for (let i = 0; i < 9; i++) {\r\n        let cellVal = getAt(numbers, i, y);\r\n        if (cellVal !== 0 && value === cellVal){\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction getAt(numbers, x, y) {\r\n    return get(numbers, 9*y+x);\r\n}\r\n\r\nfunction setAt(numbers, x, y, value) {\r\n    return set(numbers, 9*y+x, value);\r\n}","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport { useEffect, useRef, forwardRef } from 'react';\r\n\r\nexport const Square = ({selected, fixed, children, ...rest}) => (\r\n  <div css={{\r\n    display: 'grid',\r\n    backgroundColor: selected ? 'lightskyblue' : 'transparent',\r\n    '&:hover': {\r\n      backgroundColor: selected ? 'lightskyblue' : 'aliceblue',\r\n    },\r\n  }}\r\n  {...rest}\r\n  >\r\n    <span css={{\r\n      color: fixed ? 'black' : 'darkgray',\r\n      fontSize: 'xx-large',\r\n      userSelect: 'none',\r\n      margin: 'auto',\r\n    }}>\r\n      {children}\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport const Button = ({children, ...rest}) => (\r\n  <button css={{\r\n    borderRadius: '5px',\r\n    color: 'white',\r\n    backgroundColor: 'dodgerblue',\r\n    fontSize: 'x-large',\r\n    border: '0px solid transparent',\r\n    padding: '10px 30px',\r\n    margin: '20px 10px',\r\n    textTransform: 'uppercase',\r\n\r\n    '&:hover': {\r\n      backgroundColor: 'deepskyblue',\r\n    }\r\n  }}\r\n  {...rest}\r\n  >\r\n    {children}\r\n  </button>\r\n);\r\n\r\nexport const Grid = forwardRef(({rows, columns, children, ...rest}, ref) => (\r\n  <div css={{\r\n    display: 'grid',\r\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\r\n    gridTemplateRows: `repeat(${rows}, 1fr)`,\r\n    overflow: 'hidden',\r\n  }}\r\n  ref={ref}\r\n  {...rest}\r\n  >\r\n    {children}\r\n  </div>\r\n));\r\n\r\nexport const SudokuGrid =({numbers, fixed, selection, onSelectCell, onClickOutside, ...rest}) => {\r\n  const r = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const handleOutside = event => {\r\n      if (r.current && !r.current.contains(event.target)){\r\n        onClickOutside(event);\r\n      }\r\n    }\r\n    \r\n    document.addEventListener('click', handleOutside);\r\n    return () => {\r\n      document.removeEventListener('click', handleOutside);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Grid rows={9} columns={9}\r\n      css={{\r\n        border: '2px solid black',\r\n        borderRadius: '5px'\r\n      }}\r\n      ref={r}\r\n      {...rest}\r\n    >\r\n      {numbers.map((number, index) => {\r\n        const x = index % 9;\r\n        const y = Math.trunc(index / 9);\r\n        return (\r\n          <Square\r\n            onClick={() => onSelectCell(index)}\r\n            css={{\r\n              borderTop: y === 0 ? '0px solid transparent' : y % 3 === 0 ? '2px solid black' : '1px solid grey',\r\n              borderLeft: x === 0 ? '0px solid transparent' : x % 3 === 0 ? '2px solid black' : '1px solid grey'\r\n            }}\r\n            selected={selection === index}\r\n            fixed={fixed.get(index)}\r\n            key={index}\r\n          >\r\n            { number === 0 ? '' : number }\r\n          </Square>\r\n      )})}\r\n    </Grid>\r\n)};\r\n\r\nexport const NumButton = ({number, ...rest}) => (\r\n  <button\r\n    css={{\r\n        borderRadius: '5px',\r\n        width: '50px',\r\n        height: '50px',\r\n        fontSize: 'x-large',\r\n        border: '1px solid lightgrey',\r\n        backgroundColor: 'whitesmoke',\r\n        margin: '2px',\r\n    }}\r\n    {...rest}\r\n  >\r\n    {number}\r\n  </button>\r\n);","/** @jsx jsx */\n\nimport './global.css';\nimport React from 'react';\nimport { List, Range } from 'immutable';\nimport { solve } from './SudokuSolver.js';\nimport { jsx } from \"@emotion/core\";\nimport { Button, SudokuGrid, NumButton } from './components.js';\n\nexport default class App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: List(Array(81).fill(0)),\n      fixed: List(Array(81).fill(false)),\n      selection: -1\n    }\n  }\n\n  deselect = () => {\n    this.setState({\n      selection: -1\n    });\n  };\n\n  handleClick = (index) => {\n    this.setState({\n      selection: index\n    });\n  };\n\n  resetPuzzle = () => {\n    this.setState({\n      numbers: List(Array(81).fill(0)),\n      fixed: List(Array(81).fill(false)),\n      selection: -1\n    });\n  };\n\n  solvePuzzle = () => {\n    let nums = solve(this.state.numbers);\n    this.setState({\n      numbers: nums,\n    })\n  };\n\n  onNumButton = (val) => {\n    if (this.state.selection !== -1) {\n      this.setState({\n        numbers: this.state.numbers.set(this.state.selection, val),\n        fixed: this.state.fixed.set(this.state.selection, val !== 0)\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div css={{\n        textAlign: 'center',\n      }}>\n        <SudokuGrid \n          css={{\n            width: '540px',\n            height: '540px',\n            marginRight: 'auto',\n            marginLeft: 'auto',\n            marginTop: '40px',\n            marginBottom: '20px',\n          }}\n          numbers={this.state.numbers}\n          fixed={this.state.fixed}\n          onSelectCell={this.handleClick}\n          selection={this.state.selection}\n          onClickOutside={this.deselect}\n        />\n        <div>\n          {Range(1, 10).map(num => <NumButton number={num} key={num} onClick={() => this.onNumButton(num)}/>)} \n        </div>\n        <Button onClick={this.solvePuzzle}>\n          Solve Puzzle\n        </Button>\n        <Button onClick={this.resetPuzzle}>\n          Reset Puzzle\n        </Button>\n        <Button onClick={() => this.onNumButton(0)}>\n          Erase Cell\n        </Button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}